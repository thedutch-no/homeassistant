################################################################################
#
# Templates used in HA
#
################################################################################

binary_sensor:
  - name: varmepumpe_on
    unique_id: 76258df1-0906-4fa3-a228-3766e4dc072a
    delay_off:
      minutes: 0
    state: >
      {{ states('sensor.varmepumpe_power')|float > 5 }}

#  - name: workday
#    unique_id: 83bb15fe-f15f-49d8-8c34-9808365ce250
#    state: >
#      {% if as_datetime(states('input_datetime.datetime_work_start')).isoweekday() < 6 %}
#        {% if states('input_select.start_location') == 'Weekend' %}
#          {{ false }}
#        {% else %}
#          {{ true }}
#        {% endif %}
#      {% else %}
#        {{ false }}
#      {% endif %}

sensor:
  #########################
  #
  # Dynamic Energy Prices tracking
  # - Nordpool region: Oslo
  #
  #########################
  - name: nordpool_energyprices
    unique_id: b59f3231-2982-43c3-ad9d-9bed780dd131
    icon: mdi:currency-sign
    unit_of_measurement: "NOK"
    state: >
      {{ states('sensor.nordpool_kwh_oslo_nok_3_10_025') | float(0) + states('input_number.nordpool_additional_costs') | float(0) }}
    attributes:
      times: >
        {% set ns = namespace(times=[]) -%}
        {%- set today = state_attr('sensor.nordpool_kwh_oslo_nok_3_10_025','raw_today') -%}
        {%- for hours in today -%}
          {%- set ns.times = ns.times + [as_local((hours.start)).strftime("%Y-%m-%d %H:%M:%S")] -%} 
        {%- endfor -%}
        {%- set tomorrow = state_attr('sensor.nordpool_kwh_oslo_nok_3_10_025','raw_tomorrow') -%}
        {%- for hours in tomorrow -%}
          {%- set ns.times = ns.times + [as_local((hours.start)).strftime("%Y-%m-%d %H:%M:%S")] -%} 
        {%- endfor -%}
        {{ ns.times }}
      prices: >
        {% set ns = namespace(prices=[]) -%}
        {%- set today = state_attr('sensor.nordpool_kwh_oslo_nok_3_10_025','raw_today') -%}
        {%- for hours in today -%}
          {%- set ns.prices = ns.prices + [hours.value + states('input_number.nordpool_additional_costs') | float(0)] -%} 
        {%- endfor -%}
        {%- set tomorrow = state_attr('sensor.nordpool_kwh_oslo_nok_3_10_025','raw_tomorrow') -%}
        {%- for hours in tomorrow -%}
          {%- if hours.value -%}
            {%- set ns.prices = ns.prices + [hours.value + states('input_number.nordpool_additional_costs') | float(0)] -%} 
          {%- endif -%}
        {%- endfor -%}
        {{ ns.prices }}

  #########################
  #
  # Battery list bases on:
  # - battery level below treshold
  # - treshold is in: input_number.battery_threshold
  #
  #########################
  - name: "Low Battery Devices"
    unique_id: ba292875-ae67-480d-9867-29cdb20afaea
    icon: >
      mdi:battery-low
    state: >
      {% set threshold = states('input_number.battery_threshold') | int %}
      {%- set ns = namespace(sensors=[]) -%}
      {%- for state in states.sensor 
        | selectattr('attributes.device_class', 'defined') 
        | selectattr('attributes.state_class', 'defined') 
        | selectattr('attributes.device_class', '==', 'battery') 
        | selectattr('attributes.state_class', '==', 'measurement') 
        | selectattr('state', 'is_number') -%}
        {%- if state.state | int <= threshold -%}
          {% set ns.sensors = ns.sensors + [dict(name = state.name | replace(' battery', '') | replace(' Battery', ''), state = state.state | int)] %}
        {%- endif -%}
      {%- endfor -%}
      {%- set batt = ns.sensors | sort(attribute='state') %}
      {%- set ns = namespace(batt='') -%}
      {%- for state in batt -%}
          {% set ns.batt= ns.batt + (state.name  ~ ' (' ~ state.state ~'%)' ~ "\n") %}
      {%- endfor -%}

      {% if ns.batt | count > 0 %}
        {{ ns.batt | truncate(255, true, '...') }}
      {% else %}
        {{ 'unavailable' }}
      {% endif %}
    #        The code for the Conditional Card on the dashboard:
    # {{states('sensor.low_battery_devices')}}

  #########################
  #
  # Number of Doors Open
  # - Count the number of open doors (exept washer and dryer)
  #
  #########################
  - name: number_open_doors
    unique_id: 102c4c10-c1d6-4a52-a313-10b8a7aaa154
    icon: mdi:door-open
    state: >
      {%- set ns = namespace(doorsensors=[]) -%}
      {%- set ns.doorsensors = states.binary_sensor
                | selectattr('attributes.device_class', 'defined')
                | selectattr('attributes.device_class', '==', 'door')
                | selectattr('state', 'eq', 'on')
                | rejectattr('attributes.friendly_name', 'in' , 'Washing machine - Door sensor contact')
                | rejectattr('attributes.friendly_name', 'in' , 'Tumble Dryer - Door sensor contact')
                | map(attribute='name') | list -%}
      {{ ns.doorsensors | count }}

  #########################
  #
  # What Doors Are Open
  # - Count the number of open doors (exept washer and dryer)
  #
  #########################
  - name: "What Doors Are Open"
    unique_id: da619118-2e69-45fd-ae14-1c9c68edf6c6
    icon: mdi:door-open
    state: >
      {%- set ns = namespace(doorsensors=[]) -%}
      {%- set ns.doorsensors = states.binary_sensor
                | selectattr('attributes.device_class', 'defined')
                | selectattr('attributes.device_class', '==', 'door')
                | selectattr('state', 'eq', 'on')
                | rejectattr('attributes.friendly_name', 'in' , 'Washing machine - Door sensor contact')
                | rejectattr('attributes.friendly_name', 'in' , 'Tumble Dryer - Door sensor contact')
                | map(attribute='name') | list -%}
      {%- if (ns.doorsensors | count > 0) -%}
        {{ ns.doorsensors | list | join('/n') }}
      {%- else -%}
        unavailable
      {%- endif -%}




  #########################
  #
  # Grouping All appliances together in 1 power sensor
  # - micorwave
  # - washing machine
  # - tumble dryer
  # - refrigerator
  # - freezer
  # - water heater
  #
  #########################
  - name: "All Appliances power"
    unique_id: 7d24a22f-2cd7-4474-a9d9-14f8e8653693
    unit_of_measurement: W
    device_class: power
    state_class: measurement
    state: >-
      {{
        states('sensor.microwave_power')|float(0)
        + states('sensor.washing_machine_power_module_power')|float(0)
        + states('sensor.tumble_dryer_power_module_power')|float(0)
        + states('sensor.refrigerator_power')|float(0)
        + states('sensor.freezer_power')|float(0)
        + states('sensor.water_heater_power')|float(0)
        + states('sensor.stove_power')|float(0)
      }}

  #########################
  #
  # Grouping All heating devices together in 1 power sensor
  # - varmepumpe
  # - panel oven - bathroom
  # - panel oven - frontdoor
  # - ventilation - bedroom
  #
  #########################
  - name: "All Heating power"
    unique_id: 3ece76ea-d270-4d67-800c-53bbfe256ad7
    unit_of_measurement: W
    device_class: power
    state_class: measurement
    state: >-
      {{
        states('sensor.varmepumpe_power')|float(0)
        + states('sensor.panel_oven_br_power')|float(0)
        + states('sensor.panel_oven_fd_power')|float(0)
        + states('sensor.ventilation_power')|float(0)
      }}

  #########################
  #
  # Grouping All equipment together in 1 power sensor
  # - office equipment
  # - multi-media equipment
  #
  #########################
  - name: "All Equipment power"
    unique_id: 49f53fac-bc88-459a-a042-634a25399a7a
    unit_of_measurement: W
    device_class: power
    state_class: measurement
    state: >-
      {{
        states('sensor.office_equipment_power')|float(0)
        + states('sensor.multi_media_equipment_power')|float(0)
      }}

  #########################
  #
  # Grouping All lights together in 1 power sensor
  # - All entities in domain light
  #
  #########################


  #########################
  #
  # Debug helper template for Aqara Cube
  # - use in combination with Zigbee2MQTT - Xiaomi Cube Controler blueprint
  # - (https://community.home-assistant.io/t/zigbee2mqtt-xiaomi-cube-controller/393203)
  #
  #########################

  #########################
  #
  # Dynamic Energy Prices tracking
  # - All entities in domain light
  #
  #########################


